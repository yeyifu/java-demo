package util;

public class ArrayBox{
	
	//存放数组
	private int[] elementDate;
	//设计一个自己的属性，用来记录数组内存储的有效元素个数
	private int size=0;
	//负责确保数组内部的容量
	private void ensureCapacityInternal(int minCapacity) {
		//判断如果你需要的最小容量比原数组的长度还要大
		if(minCapacity - elementDate.length > 0) {
			//需要对数组扩容,计算扩容大小
			this.grow(minCapacity);
		}
	}
	
	//负责计算扩容大小
	private void grow(int minCapacity) {
		//获取原数组长度
		int oldCapacity = elementDate.length;
		int newCapacity = oldCapacity+(oldCapacity>>1);
		if(newCapacity - minCapacity < 0) {
			newCapacity = minCapacity;
		}
		//创建新数组，将原数组中的所有元素移入新数组
		elementDate = this.copyOf(elementDate, newCapacity);
	}
	
	//将原数组中的元素移入新数组中
	private int[] copyOf(int[] oldArray,int newCapacity) {
		//按照提供的长度创建一个新数组
		int[] newArray = new int[newCapacity];
		//将原数组中的元素按照位置移入新数组中
		for(int i=0;i<oldArray.length;i++) {
			newArray[i] = oldArray[i];
		}
		//将原数组返回
		return newArray;
	}
	
	
	//用来将用户给定的element存起来，参数是需要存起来的元素，返回值是否存储成功
	public boolean add(int element) {
		//找一个别人做事，确保数组的内部容量够用
		this.ensureCapacityInternal(size+1);
		//上述一行代码可以执行，证明elementDate的数组肯定够用
		//直接将新来的elemen元素存入数组中，并且让size多记录一个
		elementDate[size++] = element;
		//返回true告知用户存储元素成功
		return true;
		
	}
	
	//用来获取给定位置的元素,参数是索引位置，返回是取得的元素
	public int get(int index) {
		
	}
	
	//删除指定位置的元素，参数是索引位置，返回值是删除掉的那个元素
	public int remove(int index) {
		
	}
	
}